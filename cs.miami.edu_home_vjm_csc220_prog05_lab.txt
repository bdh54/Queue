0. Run prog05/MaintainQueue and make sure you know how it works.
   The "position" button won't work until you do step #1.
   Add a few people, peek, remove, etc.
   What happens when you peek at an empty queue?


1. Implement the "position" button (case 4).  Use the logic given and
   the new for-loop you learned about in lecture.  Test.
   

2. In ArrayQueue.java, read and understand offer and peek.  This means
   that you are ready to write either of them on the quiz.  Implement
   poll.

   Switch MaintainQueue to using ArrayQueue.  Make sure it is working.
   It won't print the list (and position won't work) because the
   special loop won't work for ArrayQueue until you implement
   iterator.  Also, because you don't reallocate and the capacity is
   five, if you add six people, the sixth person will become first in
   line!


3. Implement the (internal) Iter class that implements Iterator<E>.
 
   a. What condition on count tells us that hasNext should return
      true?  (What is the valid range of values of next?)

   b. Implement next().

   c. Test MaintainQueue again.  The special for-loop and hence the
      "position" button should work and it should print out the queue.
      Why?  Because AbstractQueue toString uses YOUR Iterator.


4. Finish implementing reallocate() in ArrayQueue using the new type
   of for-loop.  Remember, inside a class, its name is this.  Try
   adding more than five elements in MaintainQueue.

   Test using TestArrayQueue.


5. Run prog05.jar (double-click on it).  Play the game as a human.
   Can you get from lead to gold?  pass to fail?  trash to money?
   Does the computer get there in fewer words?

   Create a class NotWordle.  Its constructor should take a
   UserInterface and store it in a class variable.

public class NotWordle { // NotWordle class
  UserInterface ui; // class variable

  NotWordle (UserInterface ui) { // constructor that takes a UserInterface
    this.ui = ui; // and stores it in a class variable
  }

   In its main method, create a new NotWordle with a new GUI and store
   the NotWordle in game.  Ask the user for a starting word and a
   target word.  Ask if the human or the computer should play:

    String[] commands = { "Human plays.", "Computer plays." };



   Call game.play or game.solve with the starting word and the target
   word.  (solve will empty for now.)

 void play (String start, String target){}
â€‚void solve (String start, String target){}

   In play, do the following forever (until the return occurs).  Tell
   the user the current word (the start) and the target word.  Ask for
   the next word.  Set the start word variable to that next word.  If
   it equals the target, tell the user ``You win!'' and return.
   Otherwise keep looping.  Test.


6. peek in LinkedQueue is just the same as LinkedStack (only with
   first instead of topNode).  poll is just the same as pop except you
   should set last to null if first gets set to null, and you should
   decrement size.

   If first is null, then offer sets both first and last to the same
   new Node.  Otherwise, it adds a new Node at the end.  That takes
   two lines, one to add a new Node as the next one after the current
   last, and another to set last to that new Node.  Don't forget to
   increment size.

   Switch MaintainQueue to LinkedStack and test.  Printing and
   position won't work.


7. Implement Iter hasNext() and next().  Test using MaintainQueue.
   position should work now, and it should print the queue.

   Test using TestLinkedQueue.


HOMEWORK

8. In NotWordle, create a static boolean method oneLetterDifferent which
   takes two String as input and returns true if they have the same
   length and differ in exactly one character.

   Modify play so that it calls oneLetterDifferent.  It should warn
   the user and NOT change the current (start) word variable if the
   word that the user suggests is not one letter away from the current
   start word.  Test.


9. In NotWordle main, just after creating the new NotWordle in main,
   ask the user for the name of a word file and call
   game.loadWords(filename).  Declare List<String> allWords in
   NotWordle initialized to an ArrayList<String>.  loadWords should
   add the words in the file to allWords.

   Write a find method that takes a String word and finds that word in
   allWords.  It should return the index of that word or
   -insert_index-1 if not there.  Modify play so it also refuses a
   word not in words.  Test using the file called words.txt in the
   prog05 directory: move it to the csc220 IntelliJ project folder
   (IdeaProjects/csc220).


10. Now to implement NotWordle.solve.  Inside solve, create a new
   array of int parentIndices whose length equals the number of words
   in allWords.  Set each element to -1.  Create a queue of Integer.
   Find the index of the start word and add it to the queue.  Also
   save it in a variable startIndex since you will need to refer to it
   again later.

   While the queue is not empty, remove an index and call it
   parentIndex because we are going to look for its "children".  Get
   its entry parentWord in allWords.  Go through the list allWords and
   look for entries which aren't the start word, have an index with
   parentIndices[index]==-1, and are one letter different from
   parentWord.  For each one you find, set parentIndices[index] to
   parentIndex and add index to the queue.

   If the word is also the target, then report success.  To get the
   solution in reverse order, follow parentIndices[index] back to the
   start index.  Display the solution in forward order.

   Test using TestNotWordle.

